<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Use Cases">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" /><title>
			Application commands
		</title>
        <link href="../Resources/Stylesheets/DocLoc.css" rel="stylesheet" type="text/css" />
        <script src="../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
    </head>
    <body>
        <h1><a name="kanchor24"></a>Application commands</h1>
        <p>Each <a href="../Concepts/DANUBE_APPLICATION_COMMANDS.htm">application command</a> is associated with one command set. A command set is associated with one or more VUI forms. A VUI form can have more than one command set associated with it. </p>
        <h2>Prerequisites</h2>
        <p>You've speech-enabled an activity (see: <a href="DANUBE_SPEECH_ENABLE_ANDROID.htm">Speech-enabling your Android app</a>).</p>
        <h2>Procedure</h2>
        <p>To define application commands, do the following:</p>
        <ol>
            <li value="1">
                <p>Create a command set by instantiating the <code>CommandSet</code> class:</p>
                <p class="example"><code>CommandSet testCommandSet = new CommandSet("My Test CommandSet", "Description of my test command set");</code> </p>
                <p class="indent2"><code>My Test CommandSet</code> - a human-readable title for your command set; displayed on the personalization &amp; help screen.</p>
                <p class="indent2"><code>Description of my test command set</code> - a human-readable description; displayed on the personalization &amp; help screen.</p>
            </li>
            <li value="2">
                <p>Create application commands in the command set:</p>
                <p class="example"><code>testCommandSet.createCommand("myTestCommand", "this is a test", "THIS&#160;IS&#160;A&#160;TEST", "My test command description.");</code> </p>
                <p class="indent2"><code>myTestCommand</code> - the unique identifier of the application command; this is the identifier that your app receives in the application command event callback when it's recognized.</p>
                <p class="indent2 warning"><span class="important">Important:</span>&#160;Make sure the application command ID doesn't contain spaces and doesn't start with a number.</p>
                <p class="indent2"><code>this is a test</code> - the application command phrase (that's said to initiate the application command); displayed on the personalization &amp; help screen if no display string is set.</p>
                <p class="indent2"><code>THIS&#160;IS&#160;A&#160;TEST</code> - the application command display string; displayed on the personalization &amp; help screen. If you don't want to set a display string, pass a null value or empty string.</p>
                <p class="indent2"><code>My test command description</code> - a human readable description; displayed on the personalization &amp; help screen.</p>
            </li>
            <li value="3">
                <p>Obtain a reference to the <code>VuiController</code> object in your activity and associate the command set with it:</p>
                <p class="example"><code>theVuiController.assignCommandSets(new CommandSet[] {testCommandSet});</code>
                </p>
                <p><b>Note:</b>&#160;<code>assignCommandSets</code> replaces your application commands; it doesn't append commands to an existing set or append additional sets. Define all your application commands and command sets and then call <code>assignCommandSets</code> only once.</p>
            </li>
            <li value="4">
                <p>Call the <code>synchronize()</code> method on the VuiController to apply changes:</p>
                <p class="example"><code>theVuiController.synchronize();</code>
                </p>
            </li>
        </ol>
        <h3>Standard placeholders</h3>
        <p>Standard placeholders are delivered with <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span>. To add a standard placeholder to an application command, add its identifier to the phrase of the command:</p>
        <p class="example"><code>testCommandSet.CreateCommand("myScrollCommand", "scroll down &lt;standard:cardinal0-100&gt; pages", "scroll down &lt;standard:cardinal0-100&gt; pages","Scrolls down the specified number of pages.");</code><![CDATA[  ]]></p>
        <p>For a list of standard placeholders, see: <a href="../Concepts/DANUBE_APPLICATION_COMMANDS.htm#StandardPlaceholders">Standard placeholders</a>.</p>
        <p class="note"><b>Note:</b> If you use a display string, the placeholder in the display string and in the phrase must be the same (see: <a href="../Concepts/DANUBE_APPLICATION_COMMANDS.htm#Recommen">Recommendations for phrases</a>).</p>
        <h3>App-defined placeholders</h3>
        <p>When designing the VUI for your app, you can provide one or more commands. For example, you can define voice commands that refer to a patient name: <span class="command">show allergies for mister Pink</span> or <span class="command">create new note for mister Orange</span>. To do this, you can create an app-defined placeholder and add it to application commands as needed. Proceed as follows:</p>
        <ol>
            <li value="1">
                <p>Create an application command with a placeholder defined in angled brackets for the phrase parameter:</p>
                <p class="example"><code>testCommandSet.createCommand("myShowPatientCommand", "show me &lt;patient&gt;", "show me &lt;patient&gt;", "Shows data for the corresponding patient.");</code>
                </p>
                <p class="indent2"><code>&lt;patient&gt;</code> is the unique identifier of the placeholder.</p>
                <p class="indent2 note"><b>Note:</b> The same placeholder can be used in different commands.</p>
            </li>
            <li value="2">
                <p>Create the placeholder by creating an instance of the <code>CommandPlaceholder</code> class:</p>
                <p class="example"><code>CommandPlaceholder patientCommandPlaceholder = new CommandPlaceholder("patient", "Name of the patient");</code>
                </p>
                <p class="indent2"><code>patient</code> - the unique identifier of the placeholder that's used in application command phrases; must not contain spaces and/or numbers.</p>
                <p class="indent2"><code>Name of the patient</code> - a human-readable description; displayed on the personalization &amp; help screen.</p>
            </li>
            <li value="3">
                <p>Set its phrases and values: </p>
                <p class="example"><code>patientCommandPlaceholder.setValues(new String[] { "PTN.48389488", "PTN.48323466"}, new String[] { "Mr. Pink", "Mr. Orange"});</code>
                </p>
                <p class="indent2"><code>"PTN.48389488", "PTN.48323466"</code> - an array of strings containing the values of the placeholder. </p>
                <p class="indent2"><code>"Mr. Pink", "Mr. Orange"</code> - an array of strings containing the corresponding spoken forms. </p>
                <p class="indent2">The number of elements in the two arrays must be the same. In this example, the "patient" placeholder can have two values, PTN.48389488 if the user says <span class="command">mister Pink</span> or PTN.48323466 if the user says <span class="command">mister Orange</span>.</p>
                <p class="indent2 note"><b>Note:</b> The value of a placeholder can be changed. The new value will become active after the next <code>synchronize()</code> call.</p>
            </li>
            <li value="4">
                <p>Obtain a reference to the <code>VuiController</code> object in your activity and associate the placeholder with it:</p>
                <p class="example"><code>theVuiController.assignCommandPlaceholders(new CommandPlaceholder[] { patientCommandPlaceholder});</code> </p>
            </li>
            <li value="5">
                <p>Call the <code>synchronize()</code> method on the VuiController to apply changes:</p>
                <p class="example"><code>theVuiController.synchronize();</code>
                </p>
            </li>
        </ol>
        <h3>Recognizing application commands</h3>
        <p>Your app is notified by <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> when application commands are recognized; the <code>onCommandRecognized</code> event is fired. For your application to receive this event, do the following:</p>
        <ol>
            <li value="1">
                <p> Your speech-enabled activity must implement the <code>VuiControllerEventListener</code> interface. The VuiController instance automatically detects if this is the case and calls the appropriate callbacks, including <code>onCommandRecognized</code>. See also: <a href="DANUBE_EVENTS_ANDROID.htm">VuiController events</a>.</p>
                <p class="example"><code>public class MyActivity extends Activity implements VuiControllerEventListener {</code>
                </p>
            </li>
            <li value="2">
                <p>Implement the <code>onCommandRecognized</code> method of the <code>VuiControllerEventListener</code> interface. This method is called back when an application command is recognized.</p>
                <p class="example"><code>public void onCommandRecognized(String id, String spokenPhrase, String content, HashMap&lt;String, String&gt; placeholderValues) {</code>
                </p>
            </li>
            <li value="3">
                <p>In the callback method, check for the ID of the recognized application command.</p>
                <p class="example"><code>if (id.equals("myShowPatientCommand")) {</code>
                </p>
            </li>
            <li value="4">
                <p>Process the recognized placeholder values:</p><pre class="example">
if (placeholderValues.containsKey("patient")) {
    String patientName = placeholderValues.get("patient");
    // Perform the processing in response to the recognized application command</pre>
            </li>
        </ol>
        <p class="note"><b>Note:</b> The procedure above also applies for commands with standard placeholders. Standard placeholders delivered with <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> have predefined keys, for more information, see: <a href="../Concepts/DANUBE_APPLICATION_COMMANDS.htm#StandardPlaceholders">Standard placeholders</a>.</p>
        <h2>Remarks</h2>
        <ul>
            <li>Commands can have multiple phrases; call the <code>createCommand</code> method multiple times for the same ID, passing the phrases you want defined for the application command. </li>
            <li>To enable/disable a command set, call the <code>setEnabled()</code> method. To query the enabled/disabled state of a command set, call the <code>getEnabled()</code> method.</li>
            <li>To enable/disable individual commands in a command set, call the <code>enableCommand()</code> method with the corresponding command ID.</li>
            <li> Best practice is to make all changes to application commands, command sets and placeholders together and call the <code>synchronize()</code> method only once.</li>
            <li>To change the placeholder in an application command, use the <code>clearValues()</code> method. Once the placeholder is empty you can add new phrases and values to the placeholder.</li>
            <li>You can speech-enable your app UI even if no speech-enabled controls are active.</li>
        </ul>
        <h3>See also</h3>
        <p class="compact2"><a href="../Concepts/DANUBE_VOICE_COMMANDS.htm">Voice commands</a> concept</p>
        <p class="indent2"><a href="../Concepts/DANUBE_APPLICATION_COMMANDS.htm">Application commands</a> concept</p>
    </body>
</html>